
using HidSharp;
using RogArmouryKbRevengGUI.KBImpls.GenericImpls;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace RogArmouryKbRevengGUI.InterfaceGenericKeyboard
{
    class AsusTufK7 : GenericAsusRogKB
    {
        protected override int PIDOfThisDevice
        {
            get { return 6314; }
        }
        public override string GetPrettyName()
        {
            return "Asus TUF K7";
        }
        public override Tuple<int, int> GetDirectColorCanvasMaxLength()
        {
            return Tuple.Create(23, 6);
        }
        public override Tuple<int, int> GetMultiStaticColorDataIndexByVKCode(int virtualKeyCode)
        {

            int[,] VIRTUAL_KEY_CODE = new int[,]
{{27,192,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,90},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,220,13},{119,48,80,186,191,0,45,46},{120,189,219,222,0,93,36,35},{121,187,221,220,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_UK = new int[,]
 {{27,223,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,220,90},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,186,191,0,45,46},{120,189,219,192,0,93,36,35},{121,187,221,222,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_CZ = new int[,]
  {{27,192,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,89},{115,54,90,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,186,191,0,45,46},{120,187,219,222,0,93,36,35},{121,191,221,220,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_SW = new int[,]
   {{27,191,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,89},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,222,189,0,45,46},{120,219,186,220,0,93,36,35},{121,221,192,223,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_FR = new int[,]
    {{27,222,9,20,160,162,49,50},{112,51,69,68,88,67,65,90},{113,52,82,70,86,0,81,83},{114,53,84,71,66,32,226,87},{115,54,89,72,78,0,91,164},{116,55,85,74,188,0,122,123},{117,56,73,75,190,0,0,8},{118,57,79,76,191,165,0,13},{119,48,80,77,223,0,45,46},{120,219,221,192,0,93,36,35},{121,187,186,220,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_DE = new int[,]
     {{27,220,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,89},{115,54,90,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,192,189,0,45,46},{120,219,186,222,0,93,36,35},{121,221,187,191,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_ES = new int[,]
      {{27,220,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,90},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,192,189,0,45,46},{120,219,186,222,0,93,36,35},{121,221,187,191,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_HU = new int[,]
       {{27,48,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,89},{115,54,90,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,192,80,186,189,0,45,46},{120,191,219,222,0,93,36,35},{121,187,221,220,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_IT = new int[,]
        {{27,220,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,90},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,192,189,0,45,46},{120,219,186,222,0,93,36,35},{121,221,187,191,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_PT = new int[,]
         {{27,220,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,90},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,192,189,0,45,46},{120,219,187,222,0,93,36,35},{121,221,186,191,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_TR = new int[,]
          {{27,192,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,90},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,191,0,0,8},{118,57,79,76,220,165,0,13},{119,48,80,186,190,0,45,46},{120,223,219,222,0,93,36,35},{121,189,221,188,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_NO = new int[,]
           {{27,220,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,90},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,192,189,0,45,46},{120,187,221,222,0,93,36,35},{121,219,186,191,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_WB = new int[,]
            {{27,223,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,89},{115,54,90,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,0,13},{119,48,80,186,189,0,45,46},{120,191,219,222,0,93,36,35},{121,187,221,220,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_BE = new int[,]
             {{27,222,9,20,160,162,49,50},{112,51,69,68,88,67,65,90},{113,52,82,70,86,0,81,83},{114,53,84,71,66,32,226,87},{115,54,89,72,78,0,91,164},{116,55,85,74,188,0,122,123},{117,56,73,75,190,0,0,8},{118,57,79,76,191,165,220,13},{119,48,80,77,187,0,45,46},{120,219,221,192,0,93,36,35},{121,189,186,0,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}}; int[,] VIRTUAL_KEY_CODE_IS = new int[,]
              {{27,220,9,20,160,162,49,50},{112,51,69,68,88,67,81,87},{113,52,82,70,86,0,65,83},{114,53,84,71,66,32,226,90},{115,54,89,72,78,0,91,164},{116,55,85,74,77,0,122,123},{117,56,73,75,188,0,0,8},{118,57,79,76,190,165,191,13},{119,48,80,192,189,0,45,46},{120,187,221,222,0,93,36,35},{121,219,186,0,161,163,37,38},{44,145,19,0,39,40,33,34},{103,100,97,0,144,0,0,0},{104,101,98,96,111,0,0,0},{105,102,99,110,106,0,0,0},{107,0,13,0,109,0,0,0}};


            var list = new List<int[,]>();
            list.Add(VIRTUAL_KEY_CODE);
            list.Add(VIRTUAL_KEY_CODE_BE);
            list.Add(VIRTUAL_KEY_CODE_CZ);
            list.Add(VIRTUAL_KEY_CODE_DE);
            list.Add(VIRTUAL_KEY_CODE_ES);
            list.Add(VIRTUAL_KEY_CODE_FR);
            list.Add(VIRTUAL_KEY_CODE_HU);
            list.Add(VIRTUAL_KEY_CODE_IS);
            list.Add(VIRTUAL_KEY_CODE_IT);
            list.Add(VIRTUAL_KEY_CODE_NO);
            list.Add(VIRTUAL_KEY_CODE_PT);
            list.Add(VIRTUAL_KEY_CODE_SW);
            list.Add(VIRTUAL_KEY_CODE_TR);
            list.Add(VIRTUAL_KEY_CODE_UK);
            list.Add(VIRTUAL_KEY_CODE_WB);


            var duplicates = list.GroupBy(x => x)
                                        .Where(g => g.Count() > 1)
                                        .Select(x => x.Key).ToList();
            int a = 0;





            return Tuple.Create(0, 0);
        }
        public override Tuple<int, int> GetDirectColorCanvasIndexByVKCode(int virtualkeyCode)
        {
            throw new NotImplementedException(); //TODO
        }
    }

    class AsusTufK5 : GenericAsusRogKB
    {
        protected override int PIDOfThisDevice
        {
            get { return 6297; }
        }
        public override string GetPrettyName()
        {
            return "Asus TUF K5";
        }
        public override bool DoesExistOnSystem()
        {
            return Utils.GetHidDevice(2821, PIDOfThisDevice, 3, 65280, out _) != null
                && Utils.GetHidDevice(2821, PIDOfThisDevice, 1, 65472, out _) != null;
        }
        public override void Connect()
        {
            HidDevice iface0Device;
            if ((iface0Device = Utils.GetHidDevice(2821, PIDOfThisDevice, 3, 65280, out _)) != null)
            {
                _ = Utils.GetHidDevice(2821, PIDOfThisDevice, 1, 65472, out DeviceReportIDToUse);
                DeviceHIDStream = iface0Device.Open();
                DeviceHIDStream.ReadTimeout = 3000;
                DeviceInputHandler = iface0Device.GetReportDescriptor().CreateHidDeviceInputReceiver();
                DeviceInputHandler.Received += new EventHandler(OnHIDInputReceived);
                DeviceInputHandler.Start(DeviceHIDStream);
                DeviceMaximumInputReportLen = iface0Device.GetMaxInputReportLength();
            }
        }
        public override Tuple<int, int> GetDirectColorCanvasMaxLength()
        {
            return Tuple.Create(5, 1);
        }
        public override Tuple<int, int> GetMultiStaticColorDataIndexByVKCode(int virtualKeyCode)
        {
            throw new NotImplementedException(); //TODO
        }
        public override Tuple<int, int> GetDirectColorCanvasIndexByVKCode(int virtualkeyCode)
        {
            throw new NotImplementedException(); //TODO
        }
        public override void SetDirectColorCanvas(Color[] colorData)
        {
            throw new NotImplementedException(); //TODO
        }
    }
}
